from simulationentities import Person
import math
import random
import numpy as np

# Distance function
def dist(a, b):
    r = 1
    distance = r * math.acos(((a[0]*b[0])+(a[1]*b[1])+(a[2]*b[2]))/(r**2))
    return distance

# Population simulation function based on references described in paper
def get_population(p, n, lat_infected=1.46049040692017, reproducible=True):
    if reproducible:
        random.seed(1)
    lat_list = list()
    lon_list = list()
    population = list()
    for i in range(0, n):
        theta = 2 * math.pi * random.uniform(0, 1)
        p_prob = random.uniform(0, 1)
        if p_prob < p:
            phi = math.acos(1 - 2 * random.uniform(0.5, 1))
        else:
            phi = math.acos(1 - 2 * random.uniform(0, 0.5))
        # source : http://corysimon.github.io/articles/uniformdistn-on-sphere/
        xlat = phi - float(0.5 * math.pi)
        xlon = theta - float(math.pi)
        lat_list.append(xlat)
        lon_list.append(xlon)
        population.append(Person([xlat, xlon], 'S', i))

    lat_marko = 0.897947637
    lon_marko = 0.0958310515
    lat_list.append(lat_marko)
    lon_list.append(lon_marko)
    population.append(Person([lat_marko, lon_marko], 'S', n, True))  # Add Marko at ID n

    lon_infected = -1.02338860758521
    lat_list.append(lat_infected)
    lon_list.append(lon_infected)
    population.append(Person([lat_infected, lon_infected], 'Inf', n + 1)) # Add patient-0 at ID n+1

    return population, lat_list, lon_list


def dist_lat_lon(co1, co2):
    r = 1
    lat1 = co1[0]
    lat2 = co2[0]
    lon1 = co1[1]
    lon2 = co2[1]
    delta_lat = abs(lat1-lat2)
    delta_lon = abs(lon1-lon2)
    a = math.sin(delta_lat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(delta_lon/2)**2
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))
    d = r * c
    return d


def get_dist_matrix(population):
    distance_matrix = np.zeros((len(population), len(population)))
    for i in population:
        for j in population:
            distance_matrix[i.id, j.id] = dist_lat_lon(i.loc, j.loc)
    return distance_matrix


def get_infection_matrix(population, S):
    distance_matrix = get_dist_matrix(population)
    infection_matrix = np.zeros((len(population), len(population)))
    # i-> j = infected-> susceptible
    for i in population:
        for j in population:
            if j.is_NH(): # North hemisphere
                constant = 2
            else:
                constant = 1
            infection_probability = 1 / (constant + (S * distance_matrix[i.id, j.id]))
            infection_matrix[i.id, j.id] = infection_probability
    return infection_matrix
