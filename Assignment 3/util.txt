from distribution import Distribution
from scipy import stats

# Adding custom logging levels for easier filtering of outputs.
LOG_EVENT_DEBUG = 3
LOG_SIMULATION_DEBUG = 5
LOG_SIMULATION_OUTPUT = 10
LOG_RUNS_DEBUG = 15
LOG_RUNS_OUTPUT = 20
LOG_RESULTS = 25

# Parameters from the assignment
def get_params(set_number):
    params = dict()
    params['runs'] = 300
    params['lambd'] = 1 / 2   # Incubation time
    params['mu'] = 1      # Infection time
    params['omega'] = 1 / 2   # Detection time
    if set_number == 1:
        params['n'] = 500
        params['p'] = 1 / 2
        params['S'] = 250
    elif set_number == 2:
        params['n'] = 500
        params['p'] = 1 / 3
        params['S'] = 200
    elif set_number == 3:
        params['n'] = 500
        params['p'] = 2 / 3
        params['S'] = 150
    elif set_number == 'Test':
        params['n'] = 500
        params['p'] = 1 / 2
        params['S'] = 250

    return params

# Initialize distributions based on reproducibility
def initialize_distributions(params, reproducible = False):
    if reproducible is False:
        incubation_random_state = None
        infection_random_state = None
        detection_random_state = None
    else:
        incubation_random_state = 1
        infection_random_state = 2
        detection_random_state = 3
    # Distribution class has been updated to allow reproducility
    incubation_dist = Distribution(stats.expon(scale=params['mu']), random_state=incubation_random_state)  # time in incubation period
    infection_dist = Distribution(stats.expon(scale=params['lambd']), random_state=infection_random_state)  # time until recovery with possibility
    # of infecting all
    detection_dist = Distribution(stats.expon(scale=params['omega']), random_state=detection_random_state)  # time until detection
    return incubation_dist, infection_dist, detection_dist
