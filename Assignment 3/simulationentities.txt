import heapq


class Person():
    '''
    Person defines a unit in the population.
    '''
    status = "S"  # Either S, I, Q or R
    def __init__(self, loc, status, id, is_marko=False):
        self.loc = loc
        self.status = status
        self.id = id
        self.is_marko = is_marko

    def __str__(self):
        return '\t id: ' + str(self.id) + '\t status: ' + str(self.status) + \
               '\t loc:' + str(self.loc) + '\t is_marko: ' + str(self.is_marko)

    # def is_susceptible(self):
    #     return self.status == "S"
    #
    # def can_infect(self):
    #     return self.status == "I"
    #
    # def is_infected(self):
    #     return self.status == "I" or self.status == "Q"

    def is_NH(self):
        if self.loc[0] > 0:
            return True
        else:
            return False


class FES:
    '''
    Taken from lecture notes
    '''
    def __init__(self):
        self.events = []

    def __str__(self): # gives all events when print(FES) is called
        sorted_list = sorted(self.events)
        s = ''
        for event in sorted_list:
            s += str(event) + '\t'
        return s

    def add(self, event):  # adds a new event to the list
        heapq.heappush(self.events, event)

    def next(self):  # returns next event and deletes it from the list
        event = None
        try:
            event = heapq.heappop(self.events)
        except:
            print('No more events in the list')
        return event


class Event:
    '''
    Event structure shall be as follows
    'Time', 'Label', 'Source', 'Target'
    Possible Labels are all possible - Incubation, Infection, Detection, Quarantine.
    Incubation (indicating becoming incubated) of a person takes time p_ij from the infection matrix
    Infection (indicating becoming infected) of a person takes lambda time
    Detection (indicating quarantine shift) takes omega time
    Recovery (indicating recovery) takes mu time.

    '''
    def __init__(self, time, label, source, target = None, eventtime=0):
        self.time = time  # overall time at which the event takes place
        self.label = label  # type of activity (Incubation, Infection, Detection, Recovery)
        self.source = source  # source (ID of person)
        self.target = target # target (ID of person)

    def __str__(self):
        return 'label:' + str(self.label) + '\t\tsource:' + str(self.source) + \
               '\t\ttarget:' + str(self.target) +'\ttime:' + str(self.time) + '\n'

    def __lt__(self, other):
        return self.time < other.time


class SimulationStatistics:
    '''
    Class to hold all simulation level information and logs
    '''
    def __init__(self):

        # Simulation population information
        self.population = []
        self.lat_list = []
        self.lon_list = []

        # All statistics are after-event
        # Simulation Log
        self.times = [] # Time points, starting from 0
        self.events = [] # Event objects, starting from 0
        self.state_infected_number = [] # Number of infected per event
        self.state_incubated_number = [] # Number of incubated per event
        self.state_healthy_number = [] # Number of healthy per event
        self.state_quarantined_number_current = [] # Number of quarantined per event
        self.state_quarantined_number_overall = [] # Total number of quarantined so far per event
        self.state_recovered_number = [] # Number of recovered per event

        self.state_infected_set = [] # Infected people after each event
        self.state_incubated_set = [] # Incubated people after each event
        self.state_healthy_set = [] # Healthy people after each event
        self.state_quarantined_set_current = [] # Current quarantined people after each event
        self.state_quarantined_set_overall = []  # Overall quarantined people after each event
        self.state_recovered_set = [] # Recovered people after each event

        # Table statistics
        self.is_marko_infected_overall = False
        self.is_marko_infected_by_time_10 = False
        self.time_of_marko_infection = float('inf')
        self.number_of_infected_at_time_10 = 0
        self.number_of_incubated_at_time_10 = 0

        # General statistics
        self.number_untouched_by_virus = 0
        self.number_quarantined_peak = 0
        self.number_infected_and_recovered = 0
        self.time_of_infection_overall = 0

        self.contact_investigation_tree = dict()
        self.actual_infection_tree = dict()

    def __str__(self):
        return '\nTotal size of infection:\t' + str(self.number_infected_and_recovered) + '\nTime of infection:\t' + \
               str(self.time_of_infection_overall) + '\nNumber of uninfected people:\t' + \
               str(self.number_untouched_by_virus) + '\nNumber of events total:\t' + str(len(self.events)) + \
               '\nTimes:' + str(self.times) + '\nNumber of recovered patients:' + str(self.state_recovered_number)
