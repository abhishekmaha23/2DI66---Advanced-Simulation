#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Mar 12 11:40:27 2020

@author: mickberkhout
"""
import random
import numpy as np
import math

# Visualization toolkits
import matplotlib.pyplot as plt
#from mpl_toolkits import mplot3d

# Class used to save single time reports.
class TimeReport:
    def __init__ (self, new_infected, current_outbreak_size, marko_infection):
        self.new_infected = new_infected
        self.current_outbreak_size = current_outbreak_size
        self.marko_infection = marko_infection # is True when Marko is infected in that time period.
        
    def __str__(self):
        return( 'new_infected:' + str(self.new_infected) + '\ncurrent_outbreak_size:' + str(self.current_outbreak_size) + '\nmarko_infected:' + str(self.marko_infection ))

# Function to get current population
def getPopulation(n, p, q, lat_infected = 1.46049040692017):
    population = list()
    population_lat = list()
    population_lon = list()
    for i in range(0,n):
        theta = 2 * math.pi * random.uniform(0,1)
        p_prob = random.uniform(0,1)
        if p_prob < p:
            phi = math.acos(1 - 2 * random.uniform(0.5,1))
        else:
            phi = math.acos(1 - 2 * random.uniform(0,0.5))
        
        # source : http://corysimon.github.io/articles/uniformdistn-on-sphere/
        xlat = phi - float(0.5*math.pi)
        xlon = theta - float(math.pi)
        population_lat.append(xlat)
        population_lon.append(xlon)
        population.append([xlat,xlon])
    
    # Add zero infected
    population.append([lat_infected,-1.02338860758521])
    population_lat.append(lat_infected) 
    population_lon.append(-1.02338860758521)
    
    # Add Marko
    population.append([0.897947637, 0.0958310515])
    population_lat.append(0.897947637)
    population_lon.append(0.0958310515)
    
    return population_lat, population_lon, population

# Function that computes the distance between two points
def getDistanceMatrix(lat, lon):
    r = 1 # Radius of the sphere
    lat1, lat2 = np.meshgrid(lat,lat) # Get coordinate matrix for latitude
    lon1, lon2 = np.meshgrid(lon,lon) # Get coordinate matrix for longitude
    lat_diff = np.absolute(lat2 - lat1) # Get latitude difference
    lon_diff = np.absolute(lon2 - lon1) # Get longitude difference
    a = np.square(np.sin(lat_diff/2)) + np.cos(lat1) * np.cos(lat2) * np.square(np.sin(lon_diff/2))
    c = 2 * np.arctan2(np.sqrt(a),np.sqrt(1-a))
    d = r * c # Radius is set to 1, so c is used. Added for compatibility.
    return d # Return the distance

# Function that creates the infection matrix
def getInfectionMatrix(lat, lon, S):
    distance_matrix = getDistanceMatrix(lat,lon) # Retrieves the distance matrices
    infection_matrix = np.zeros((len(lat), len(lat))) # Obtain an empty matrix
    NH_population = np.greater(lat,0) # Get a vector with 1's for all lat > 0
    SH_population = np.less_equal(lat,0) # Get a vector with 1's for all lat <= 0
    infection_matrix_NH = 1/(2+S*distance_matrix) * NH_population # Obtain infection values for NH
    infection_matrix_SH = 1/(1+S*distance_matrix) * SH_population # Obtain infection values for SH
    infection_matrix = infection_matrix_NH + infection_matrix_SH # Add both values
    np.fill_diagonal(infection_matrix, 0) # Set diagonal to 0
    return infection_matrix

# Main simulation class
class Question1Simulation:
    results = []
    
     # Initialize the simulation
    def __init__(self, q, population, infection_matrix):
        self.q = q
        self.nr_infected = 0
        self.current_outbreak_size = 0
        self.population = population
        self.infection_matrix = infection_matrix
        self.frac_infected = 0
        
    # Does the actual simulation
    def simulate(self):
        self.nr_infected = 1 # Person zero is infected.
        self.results = [] # Empty results list.
                    
        infected_vector = np.zeros(len(self.population))
        infected_vector[-2] = 1 # Person zero is set to infected
        resistance_vector = np.zeros(len(self.population))
        self.current_outbreak_size = 1 # Person zero is counted in outbreak size
        
        q_prob = random.uniform(0,1) 
        if q_prob < self.q: # Probability that person zero is in quarantine
            return [TimeReport(0, 1, False)], 1/len(population) # Stop simulation and add report
        
        while self.nr_infected > 0 : # While there is an infected person
            
            # Prepare vlaues for next run
            new_infected = 0
            marko_infection = False
            new_infected_vector = np.zeros(len(self.population))
            
            for person_id in range(len(self.population)): # Loop over all persons
                
                # Skip everyone that is already resistant
                if(resistance_vector[person_id] == 1):
                    continue
                
                # Person can be infected by:
                person_vector = self.infection_matrix[person_id, :] * infected_vector
                probabilities = np.random.random(len(self.population))  # Get random probabilities
                outcome = np.less_equal(probabilities, person_vector)   # Check if a random probability is smaller than the person probability
                if(np.sum(outcome) > 0):                                # Person is infected
                    
                    # Check if person is NOT placed in quarantine
                    if(self.q <= random.random()):           
                        new_infected_vector[person_id] = 1
                    
                    resistance_vector[person_id] = 1 # Set person as resistant already 
                    self.current_outbreak_size += 1    # Add person to outbreak size
                    new_infected += 1                 # Add person to new_infected for next period
                    
                    # Check if Person that gets infected is Marko
                    if(person_id == len(population) - 1):
                        marko_infection = True # Indication that Marko is infected
                
            # Add results
            self.results.append(TimeReport(new_infected, self.current_outbreak_size/len(population), marko_infection))

            # Reset variables for next run
            self.nr_infected = new_infected 
            infected_vector = new_infected_vector
            
        # Last calculation to obtain the fraction that is infected
        self.frac_infected = self.current_outbreak_size/len(population)
        
        # Return the results
        return self.results, self.frac_infected

# Function to analyze the main results
def analyzeResults(results):
    
    # Set initial lists
    marko_infection_t = []
    infections_at_t_10 = []
    length_of_simulation = []
    size_outbreak = []
    
    # Loop through alls imulations
    for single_simulation_result in results:
        size_outbreak.append(single_simulation_result[-1].current_outbreak_size)
        length_of_simulation.append(len(single_simulation_result))
        i = 0
        
        # Loop through all time units
        for t in single_simulation_result:
            i += 1 # Start at t = 1
            
            if(i == 10): # At t = 10 monitor infections
                infections_at_t_10.append(t.new_infected)
                
            # Monitor time that Marko gets infected
            if(t.marko_infection):
                marko_infection_t.append(i)
            
            # If all information has been gathered, stop analyzing
            if(i > 10 and t.marko_infection):
                break
        
        # If t = 10 is not reached, add a 0 to the amount of infections
        if(i < 10):
            infections_at_t_10.append(0)
    
    no_runs = len(results) # Get number of runs
    
    # Probability of Marko not getting infected calculation
    p_no_marko_infection = (no_runs- len(marko_infection_t) ) / no_runs
    print("Probability of no infection of Marko: " + str(p_no_marko_infection))
    
    # Probability of Marko getting infected before t=10, given that he is infected
    marko_infected_before_10 = sum(i < 10 for i in marko_infection_t)
    try:
        p_marko_infection_before_10 = marko_infected_before_10 / len(marko_infection_t)
    except:
        p_marko_infection_before_10 = 0
    print("Probability of Marko being infected before 10: " + str(p_marko_infection_before_10))
    
    # Simulation descriptions
    print("Average length of the simulation: " + str(sum(length_of_simulation) / len(results)))
    print("Variance of the simulation length: " + str(np.var(length_of_simulation)))
    expected_infected_at_10 = sum(infections_at_t_10) / no_runs
    
    # Information about infections at t = 10.
    print("Expected number of infections at t=10: "+str(expected_infected_at_10))
    var_infected_at_10 = np.var(infections_at_t_10)    
    print("Variance of the infections at t=10: " +str(var_infected_at_10))
    
    # Expected time of Marko getting infected
    try:
        expected_time_of_marko_infection = sum(marko_infection_t) / len(marko_infection_t)
    except:
        expected_time_of_marko_infection = 0
    print("Expected time of infection of Marko given that he is infected: " + str(expected_time_of_marko_infection))
    
    var_time_of_marko_infection = np.var(marko_infection_t)
    print("Variance of infection of Marko given that he is infected: " + str(var_time_of_marko_infection))

    # Return some results for graph plotting
    return (1-p_no_marko_infection, p_marko_infection_before_10, expected_infected_at_10, expected_time_of_marko_infection, size_outbreak)

nr_runs = 1000 # Amount of simulation runs
nr_runs2 = 20 # Runs used to determine CI or number of different latitudes

# INITIAL VALUES: 
p = 1/2
n = 500
S = 250
q = 1/10

# Data recoding
prob_markoInfected = list()
prob_markoNotInfected = list()
prob_MarkoBefore10 = list()
no_infection10 = list()
time_markoInfected = list()
frac_infected_list = list()

# Used to determine latitude
latzero = -0.5*math.pi
lat_list = list()
iterate = 0

# Outer runs
for run2 in range(nr_runs2): 
    results = []
    lat_infected =1.46049040692017
    # Used to determine latitude 
    # lat_infected = latzero + random.random()*math.pi 
    lat_list.append(lat_infected)
    for run in range(nr_runs):
        # Get a progress report once every 100 runs
        if(run % 100 == 0):
            print("Doing run: " + str(run))
            
        # Generate Simulation data
        lat, lon, population = getPopulation(n, p, q, lat_infected )
        infection_matrix = getInfectionMatrix(lat,lon, S)

        # Do the simulation
        simulation = Question1Simulation(q, population, infection_matrix)
        result, frac = simulation.simulate()
        
        # Add the results
        results.append(result)
        frac_infected_list.append(frac)
        
    # Analyze the results
    (Pmarko, B10marko, E10, Tmarko, size_outbreak) = analyzeResults(results)
    
    # Store values for the CI
    prob_markoInfected.append(Pmarko)
    prob_markoNotInfected.append(1-Pmarko)
    prob_MarkoBefore10.append(B10marko)
    no_infection10.append(E10)
    time_markoInfected.append(Tmarko)

if nr_runs2 > 1:
    # Generate the half width and average
    variables = [prob_markoNotInfected, prob_MarkoBefore10, no_infection10, time_markoInfected]
    for single_ci in variables:
        print("Average: " +str(np.average(single_ci)))
        print("+ or - : " +str(1.96 * np.std(single_ci) /(20 ** 0.5)))

# Function to present plots for dependency on latitude
def plot_figures():
    fig1 = plt.figure()
    plt.xlabel('Latitude')
    plt.ylim(0,1)
    plt.ylabel('Probability of Marko getting infected')
    plt.scatter(lat_list, prob_markoInfected, color = 'red')
    plt.show()
    fig2 = plt.figure()
    plt.xlabel('Latitude')
    plt.ylim(0,15)
    plt.ylabel('Time that Marko gets infected')
    plt.scatter(lat_list, time_markoInfected, color = 'blue' )
    plt.show()

plot_figures()

heights,bins = np.histogram(frac_infected_list,bins=25)
heights = heights/sum(heights)
fig3 = plt.figure()
plt.ylabel('probability')
plt.xlabel('fraction of population infected, n = 250')
plt.xlim(0,0.4)
plt.bar(bins[:-1],heights,width=1/len(bins), color="blue", alpha=1)

