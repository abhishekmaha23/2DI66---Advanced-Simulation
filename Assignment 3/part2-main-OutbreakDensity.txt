from populationdist import get_infection_matrix, get_population
from simulation import simulate
import logging
from util import get_params, initialize_distributions
from util import LOG_EVENT_DEBUG, LOG_SIMULATION_OUTPUT, LOG_SIMULATION_DEBUG, LOG_RUNS_DEBUG, LOG_RUNS_OUTPUT, LOG_RESULTS
import time
import matplotlib.pyplot as plt
import numpy as np

if __name__ == '__main__':
    # Initialization
    for set_number in [1, 2, 3]:
        params = get_params(set_number)
        multiplier_val = 5
        reproducible = True
        # Logging configuration
        logging.addLevelName(LOG_EVENT_DEBUG, "EVENT_DEBUG")
        logging.addLevelName(LOG_SIMULATION_DEBUG, "SIMULATION_DEBUG")
        logging.addLevelName(LOG_SIMULATION_OUTPUT, "SIMULATION_OUTPUT")
        logging.addLevelName(LOG_RUNS_DEBUG, "RUNS_DEBUG")
        logging.addLevelName(LOG_RUNS_OUTPUT, "RUNS_OUTPUT")
        logging.addLevelName(LOG_RESULTS, "RESULTS")
        logging.basicConfig(level=LOG_RUNS_DEBUG, format='%(asctime)s :: %(levelname)s :: %(message)s')

        # 0. Creating simple distributions for base functionality, virus dynamic periods
        time_incubation_period, time_infection_period, time_detection_period = initialize_distributions(params, reproducible)

        # Will attempt to identify histogram probability spreads of the virus over different population sizes.
        list_of_population_sizes = [250, 500, 750, 1000]
        # Over 300 runs
        run_size = 300
        fraction_of_infected_for_population_size = []
        for index, population_size in enumerate(list_of_population_sizes):
            # Initializing output
            fraction_of_infected_for_population_size.append([])
            logging.log(LOG_RUNS_DEBUG, 'Testing population size ' + str(population_size))
            for trial in range(run_size):
                # New population and infection matrix per run
                random_population, _, _ = get_population(n=population_size, p=params['p'])
                random_infection_matrix = get_infection_matrix(random_population, S=params['S'])
                # Simulating a normal simulation
                simulation_stats = simulate(params, random_population, random_infection_matrix, time_incubation_period,
                                            time_infection_period, time_detection_period, mode='Normal',
                                            reproducible=reproducible, prob_multiplier=multiplier_val)
                fraction_of_infected_for_population_size[index].append(simulation_stats.number_infected_and_recovered/(population_size + 2))
        # for i in fraction_of_infected_for_population_size:
        #     print(i)

        # Plotting the data
        for idx, pop_size in enumerate(list_of_population_sizes):
            heights, bins = np.histogram(fraction_of_infected_for_population_size[idx], bins=25)
            print(heights)
            # print(bins)
            heights = heights / sum(heights)
            histograms_plot = plt.figure()
            plt.ylabel('Probability')
            plt.xlabel('Fraction of population infected, n = ' + str(pop_size))
            plt.xlim(0, 1)
            plt.ylim(0, 1)
            plt.bar(bins[:-1], heights, width=1 / len(bins), color="blue", alpha=1)
            plt.show()
