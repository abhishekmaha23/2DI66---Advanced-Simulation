import cartopy.crs as ccrs
import matplotlib.pyplot as plt
from math import pi
import numpy as np


def visualize_time_steps_in_population(simulation_log):
    '''
    Take in a simulation log, pick 6 equally spaced events and send to visualize data from those events
    :param simulation_log:
    :return:
    '''
    end_point_event_simulation = len(simulation_log.events)
    number_of_graphs = 6
    event_numbers = np.linspace(0, end_point_event_simulation, num=number_of_graphs, dtype=int)
    event_numbers[-1] -= 1
    np_ylist = (np.asarray(simulation_log.lat_list) * (180 / pi)).tolist()
    np_xlist = (np.asarray(simulation_log.lon_list) * (180 / pi)).tolist()

    for state in event_numbers:
        visualize_population(simulation_log, state, np_ylist, np_xlist)

def visualize_population(simulation_log, event, np_ylist, np_xlist):
    '''
    Take in simulation log, and event list. Visualize states with different colours

    Healthy - Blue
    Recovered - Green
    Infected - Red
    Incubated - Magenta (Pink)
    Quarantine - Yellow

    Plot on a world map projection.
    Shows spread of population as well as the spread of virus.
    :param simulation_log:
    :param event:
    :param np_ylist:
    :param np_xlist:
    :return:
    '''
    map_plot = plt.figure()
    ax = plt.axes(projection=ccrs.PlateCarree())
    ax.stock_img()
    list_of_infected = simulation_log.state_infected_set[event]
    list_of_incubated = simulation_log.state_incubated_set[event]
    list_of_healthy = simulation_log.state_healthy_set[event]
    list_of_quarantined = simulation_log.state_quarantined_set_current[event]
    list_of_recovered = simulation_log.state_recovered_set[event]
    temp_lat_list = []
    temp_lon_list = []
    for person_id in list_of_infected:
        temp_lon_list.append(np_xlist[person_id])
        temp_lat_list.append(np_ylist[person_id])
    plt.plot(temp_lon_list, temp_lat_list, 'r.', transform=ccrs.Geodetic())
    temp_lat_list = []
    temp_lon_list = []
    for person_id in list_of_incubated:
        temp_lon_list.append(np_xlist[person_id])
        temp_lat_list.append(np_ylist[person_id])
    plt.plot(temp_lon_list, temp_lat_list, 'm.', transform=ccrs.Geodetic())
    temp_lat_list = []
    temp_lon_list = []
    for person_id in list_of_healthy:
        temp_lon_list.append(np_xlist[person_id])
        temp_lat_list.append(np_ylist[person_id])
    plt.plot(temp_lon_list, temp_lat_list, 'b.', transform=ccrs.Geodetic())

    temp_lat_list = []
    temp_lon_list = []
    for person_id in list_of_quarantined:
        temp_lon_list.append(np_xlist[person_id])
        temp_lat_list.append(np_ylist[person_id])
    plt.plot(temp_lon_list, temp_lat_list, 'y.', transform=ccrs.Geodetic())

    temp_lat_list = []
    temp_lon_list = []
    for person_id in list_of_recovered:
        temp_lon_list.append(np_xlist[person_id])
        temp_lat_list.append(np_ylist[person_id])
    plt.plot(temp_lon_list, temp_lat_list, 'g.', transform=ccrs.Geodetic())

    marko_id = len(np_xlist) -2
    p0_id = marko_id + 1
    marko_status = 'b'
    p0_status = 'r'
    lat_marko = np_ylist[marko_id]
    lon_marko = np_xlist[marko_id]
    lat_p0 = np_ylist[p0_id]
    lon_p0 = np_xlist[p0_id]
    if marko_id in list_of_infected:
        marko_status = 'r'
    if marko_id in list_of_incubated:
        marko_status = 'm'
    if marko_id in list_of_recovered:
        marko_status = 'g'
    if p0_id in list_of_quarantined:
        p0_status = 'y'
    if p0_id in list_of_recovered:
        p0_status = 'g'
    plt.plot(lon_marko, lat_marko, 's' +marko_status, transform=ccrs.PlateCarree())
    plt.plot(lon_p0, lat_p0, 's' + p0_status, transform=ccrs.PlateCarree())
    plt.show()
